* add posthoc tests for EITHER obstacles being forced LEFT/RIGHT
* path calculator
** +same radius, entry/exit on same side+
** +add tests for entry/exit on opposite side+
** +add tests for radius increasing/decreasing+
** +fast-check arbitrary for vectors/obstacles+
** +tests for unknown entry and exit strategy+
** +needs a =calculateSegments= (plural) method+
** replace left|rightEntry|ExitBoundary with a singleton/tuple instead and let path calc use that to determine the algo
*** +replace left|rightEntry|ExitBoundary with singleton/tuple but leave logic in path calc the same+
*** +change logic in path calc to use singleton/tuple instead of using entry/exit side to determine algo+
*** change =entry|exit= in boundary circles to =side= so its uniform
*** change =offset= to =origin= consistently
*** remove the setup of boundaries for named eithers from =named.ts= and let =defaults.ts= add those properties
** add the calc of angle turned through (rotations, etc) to the calculator rather than having the render manage it
** add calc of (approximate) course distance?
** =obstacleLocalVectorToGlobal= and =normalizeAngle= need tests
* deserialisation
** +separate deserialisation concerns from the =obstacle= constructor+
   :PROPERTIES:
   :ID:       a5a32318-a1f8-4e8c-9ac3-c2defead89b4
   :END:
The obstacle constructor currently:
- adds defaults for unspecified parameters
- sets parameters for known obstacles
- deserialises non-string properties into their native types, eg. entry/exit -> Symbol

The /first/ is perfectly reasonable, and what I originally intended the constructor for - the convenience of ignoring defaults. The /second/ is /maybe/ okay, but will bloat the constructor with time as lots of obstacles get added. A obstacle 'registry' or similar is probably a good idea. The /third/ is unreasonable - it's not the constructors job to know how to deserialise strings into the correct types - that should move to the deserializer.
Maybe a decent strategy:
- the deserializer converts known non-string parameters (eg. entry, exit, name) into their native types, where they are given
- the native object is then handed to the obstacle constructor to handle known obstacles and defaults
** +start/finish boxes, gates, should take width/depth params to define where the pylons are rendered (separately from where the boundary circles lie+
** =deserializer= needs to take string argument, rather than object
* rendering improvements
** orientation vectors could do with arrow heads
** have renderer/s output an SVG DSL rather than text? makes it testable
** need to determine how to render the first/last obstacle - there is no pair of segments that border them, so the way I'm currently doing it doesn't work
* to support further courses
** +convert to an express.js app and read course from path param?+
** +add axis/grid lines+
** +auto calculate grid size+
** add boundary markers/non-participatory obstacles
** add jink lines
** hidden obstacles?
** add 'placeholder' obstacle
